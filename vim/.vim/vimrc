unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" Defaults
" --------------
set background=dark
set termguicolors
colorscheme rosepine_moon

" Always show the status line at the bottom, even if you only have one window open
set laststatus=2
" Disable audible bell because it's annoying
set noerrorbells visualbell t_vb= 	 

" Read if a file was changed outside of Vim
set autoread

" Tabs and indentation
set autoindent
set tabstop=4 shiftwidth=4
set expandtab smarttab

set noswapfile
set number
set noemoji
set nowrap
" search is case-insensitive, until a capital letter is added
set ignorecase smartcase

set lazyredraw
" Delete comment character when joining commented lines
set formatoptions+=j

set splitright splitbelow

" Allow local .vimrc per directory
set exrc

" Different cursors for Insert and Normal modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

let mapleader = " "
nnoremap <leader>qq :bd<CR>
nnoremap <leader>vc :vs ~/.vim/vimrc<CR>
nnoremap <leader>zc :vs ~/.zshrc<CR>


" UNDOTREE
" ---- --
set undodir=~/.vim/undodir
set undofile
nnoremap <leader>u :UndotreeToggle<CR>


" FUGITIVE
" ---- --
nnoremap <leader>gc :Gdiffsplit<CR>
nnoremap <leader>gf :diffget //2<CR>
nnoremap <leader>gj :diffget //3<CR>
" Fix git hooks output for husky
let g:fugitive_pty = 0


" VINEGAR
" ---- --
" Vinegar, don't show dotfiles on start. Toggle with 'gh'
set wildignore=__pycache__/,*.pyc,.DS_Store
let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+'
" Allow to move files to another (say, parent) directory
let g:netrw_keepdir = 0

augroup Netrw
    autocmd!
    autocmd FileType netrw setlocal bufhidden=wipe
augroup END


" COMMENTARY
" ---- --
augroup Commentary
    autocmd!
    autocmd FileType c,typescript,javascript,typescriptreact,hocon setlocal commentstring=//\ %s
    autocmd FileType markdown setlocal commentstring=<!--\ %s\ -->
augroup END


" FZF / Ripgrep
" ---- --
set runtimepath+=/opt/homebrew/opt/fzf
" Allow passing optional flags into Rg
"	Example: :Rg myterm -g '*.md'
command! -bang -nargs=* Rg
    \ call fzf#vim#grep("rg --column --line-number --no-heading --color=always --smart-case " . shellescape(<q-args>), 1, 
    \    fzf#vim#with_preview({"options": "--delimiter : --nth 4.."}, "right:60%"),
    \    <bang>0)
command! -bang -nargs=* RG
    \ call fzf#vim#grep(
    \    "rg --column --line-number --hidden --ignore-case --no-heading --color=always ".shellescape(<q-args>), 1,
    \    <bang>0 ? fzf#vim#with_preview({"dir": systemlist("git rev-parse --show-toplevel")[0], "options": "--delimiter : --nth 4.."}, "up:60%")
    \            : fzf#vim#with_preview({"dir": systemlist("git rev-parse --show-toplevel")[0], "options": "--delimiter : --nth 4.."}, "right:50%", "?"),
    \    <bang>0)

nnoremap <leader>f :GFiles<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap \ :RG<CR>

" Customize fzf colors to match your color scheme
" - fzf#wrap translates this to a set of `--color` options
let g:fzf_colors =
\ { "fg":      ["fg", "Normal"],
  \ "bg":      ["bg", "Normal"],
  \ "hl":      ["fg", "Comment"],
  \ "fg+":     ["fg", "CursorLine", "CursorColumn", "Normal"],
  \ "bg+":     ["bg", "CursorLine", "CursorColumn"],
  \ "hl+":     ["fg", "Statement"],
  \ "info":    ["fg", "PreProc"],
  \ "border":  ["fg", "Ignore"],
  \ "prompt":  ["fg", "Conditional"],
  \ "pointer": ["fg", "Exception"],
  \ "marker":  ["fg", "Keyword"],
  \ "spinner": ["fg", "Label"],
  \ "header":  ["fg", "Comment"] }


" WIKI
" ---- --
let g:vimwiki_list = [{"path": "~/.personal/wiki/"}]
let g:vimwiki_global_ext = 0
let g:vimwiki_folding = "custom"
" Vinegar Up is more important
nmap <Nop> <Plug>VimwikiRemoveHeaderLevel


" TEST
" ---- --
nnoremap <leader>t :wa<CR> :TestNearest<CR>
nnoremap <leader>T :wa<CR> :TestFile<CR>
let test#strategy = "vimterminal"
let test#python#runner = "pytest"
let g:test#javascript#runner = "jest"


" Camel Case Motion
" ---- --
map w <Plug>CamelCaseMotion_w
map b <Plug>CamelCaseMotion_b
map e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e
nmap cw ce
imap <C-w> <Plug>CamelCaseMotion_DeletePrevious


" CONQUER OF COMPLETION
" ---- --
" Extensions
let g:coc_global_extensions = [
  \ "coc-tsserver",
  \ "coc-json",
  \ "coc-go",
  \ "coc-pyright",
  \ "coc-eslint",
  \ "coc-vetur",
  \ "coc-css"
  \ ]
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files
set nobackup nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=number

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col(".") - 1
  return !col || getline(".")[col - 1]  =~# "\s"
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
" Remap keys for applying codeAction to the current buffer.
nmap <silent><leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <silent><leader>qf  <Plug>(coc-fix-current)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent>gd <Plug>(coc-definition) zt
nmap <silent>gy <Plug>(coc-type-definition)
nmap <silent>gi <Plug>(coc-implementation)
nmap <silent>gr <Plug>(coc-references)
nnoremap <silent> <leader>h :call CocActionAsync('doHover')<cr>
" Search workspace symbols
nnoremap <silent><nowait> <leader>s  :<C-u>CocList -I symbols<cr>

nmap <expr> <silent> <leader>sd <SID>select_current_word()
function! s:select_current_word()
  if !get(b:, "coc_cursors_activated", 0)
      return "\<Plug>(coc-cursors-word)"
  endif
  return "*\<Plug>(coc-cursors-word):nohlsearch\<CR>"
endfunction

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

function! s:disable_coc_for_type()
    let l:filesuffix_blacklist = ["wiki", "md"]
	if index(l:filesuffix_blacklist, expand("%:e")) != -1
		let b:coc_enabled = 0
	endif
endfunction
autocmd BufRead,BufNewFile * call s:disable_coc_for_type()

set noshowmode
filetype plugin indent on
syntax enable
highlight Normal guibg=NONE ctermbg=NONE

" MacOS Yank
" Sends default register to terminal TTY using OSC 52 escape sequence
function! Osc52Yank()
    let buffer=system('base64 | tr -d "\n"', @0)
    let buffer="\033]52;c;".buffer.'\033\'
    silent exe "!echo -ne ".shellescape(buffer).
        \ " > ".(exists("g:tty") ? shellescape(g:tty) : "/dev/tty")
endfunction

" Like Osc52Yank, except send all the contents to a single line
function! Osc52YankOneLine()
  let @"=substitute(@", "\n", "", "g")
  call Osc52Yank() | redraw!
endfunction

" Automatically call OSC52 function on yank to sync register with host clipboard
augroup Yank
  autocmd!
  autocmd TextYankPost * if v:event.operator ==# "y" | call Osc52Yank() | endif
augroup END

" Statusline
" ---- --
highlight YellowOnBlue guibg=#00afca guifg=#fec50c
highlight WhiteOnPurple guibg=#483162 guifg=White
highlight PurpleOnWhite guibg=White   guifg=#483162 gui=Bold

" default statusline when entering Vim
highlight StatusLine guibg=#483162 guifg=White 
highlight StatusLineNC guibg=#6D6983 guifg=White

" Formats the statusline
let g:currentmode={
       \ "n"  : "N",
       \ "v"  : "V",
       \ "V"  : "V",
       \ "\<C-V>" : "V",
       \ "i"  : "I",
       \ "r"  : "R",
       \ "R"  : "R",
       \ "Rv" : "V",
       \ "c"  : "C",
       \ "s"  : "S",
       \ "t"  : "T",
       \}

function! SpocklineActive()
    let result = ""

    if &filetype ==? "netrw"
        let result .= " %F "
    else
        let branch = FugitiveHead()
        let l:mode = g:currentmode[mode()]

        if l:mode ==? "I" || l:mode ==? "C"
            let result .= "%#YellowOnBlue#"
        else
            if strlen(branch) > 0
                let result .= "%#PurpleOnWhite#"
            else
                let result .= "%#WhiteOnPurple#"
            endif
        endif
        let result .= " " . l:mode . " %*"

        if strlen(branch) > 0
            let result .= " " . branch . " "
        endif

        let result .= "%#PurpleOnWhite# %t %*"   "file name
        let result .= "%m"                       "modified flag

        let result .= "%="                       "align right
        let result .= "%#PurpleOnWhite#%y%*"     "file type
        let result .= " %3.3p%% "                "line X of Y [percent of file]
        let result .= " ðŸ–– "
    endif

    return result
endfunction

function! SpocklineInactive()
    let result = ""

    let result .= " %f "   "file name
    let result .= "%m"     "modified flag

    let result .= "%="     "align right
    let result .= " ðŸ¤¨ "

    return result
endfunction

augroup Spockline
    autocmd!
    autocmd WinEnter * setlocal statusline=%!SpocklineActive()
    autocmd WinLeave * setlocal statusline=%!SpocklineInactive()
augroup END

set statusline=%!SpocklineActive()


" Copilot
" ---- --
imap <C-J> <Plug>(copilot-previous)
imap <C-K> <Plug>(copilot-next)
imap <C-L> <Plug>(copilot-accept-line)

imap <silent><script><expr> <C-H> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true
